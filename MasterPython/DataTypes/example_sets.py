#  ============================================================================================================================================
#  are unordered
#  don't contain duplicates
#  elements are immutable
#  are very useful for cleaning up data
#  ============================================================================================================================================

#  ============================================================================================================================================
#  Create a Set
#  ============================================================================================================================================
print('*' * 40)
#  Method 1
farm_animals = {'hen', 'pig', 'cow'}
print(farm_animals)

#  Method 2
wild_animals = set(['tiger', 'lion'])
print(wild_animals)
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  ============================================================================================================================================
#  Create an Empty Set
#  ============================================================================================================================================
print('*' * 40)
# an empty set must be created using this type of create as just using brackets will create an empty dictionary instead
empty_set = set()
print(empty_set)
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  ============================================================================================================================================
#  Add a value to a set
#  ============================================================================================================================================
print('*' * 40)
wild_animals.add('horse')
print(wild_animals)
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  ============================================================================================================================================
#  Convert a tuple to a set
#  ============================================================================================================================================
print('*' * 40)
tuple_1 = {1, 6, 19, 55}
tuple_set = set(tuple_1)
print(tuple_set)
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  ============================================================================================================================================
#  Create a set with a range of values
#  ============================================================================================================================================
print('*' * 40)
even = set(range(0, 40, 2))
for x in even:
    print(x)
print(type(even))
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________

#  ============================================================================================================================================
#  Find the number of values in the set
#  ============================================================================================================================================
print('*' * 40)
print(len(even))
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  Join two sets together
#  ============================================================================================================================================
print('*' * 40)

tuple_of_values = {1, 6}
tuple_converted_to_set = set(tuple_of_values)

new_set = {20, 50}
print(new_set.union(tuple_converted_to_set))

print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  Returns a set containing all values which are in both sets
#  ============================================================================================================================================
print('*' * 40)

new_set_1 = {20, 50, 99}
new_set_2 = {14, 21, 99}
print(new_set_1.intersection(new_set_2))

print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  Minus a set from another set
#  ============================================================================================================================================
print('*' * 40)

new_set_3 = {14, 21, 99, 145}
new_set_4 = {14, 21, 99}
remaining = new_set_3 - new_set_4
print(remaining)

print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  Output the difference between two sets
#  ============================================================================================================================================
print('*' * 40)

new_set_5 = {14, 21, 99, 145, 77}
new_set_6 = {14, 21, 99, 3}
print(sorted(new_set_5.difference(new_set_6)))  # returns 77 + 145 as these are in set 5 but not in set 6
print(sorted(new_set_6.difference(new_set_5)))  # returns 3 as this is in set 6 but not set 5
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________

#  Sort a set into order then output it
#  ============================================================================================================================================
print('*' * 40)
range_to_40 = set(range(0, 40, 2))
print(sorted(range_to_40))
print('*' * 40)
#  ____________________________________________________________________________________________________________________________________________


#  Remove and discard elements from a set
#  ============================================================================================================================================
Input1 = {10, 20, 26, 41, 54, 20}

print(Input1)
Input1.discard(20)  # Element is discarded as it is present in the set
print(Input1)  # {41, 10, 26, 54}
Input1.discard(22)  # Element is NOT discarded as it is NOT present in the set
print(Input1)  # {41, 10, 26, 54}


Input2 = {101, 201, 261, 411, 541, 206}
Input2.remove(201)  # Element is removed as it is present in the set
print(Input2)  # {261, 101, 206, 411, 541}

try:
    Input2.remove(77) # Element is NOT removed as it is NOT present in the set - KeyError returned
except KeyError:
    print('item not present')
print(Input2)  # KeyError: 22


#  ____________________________________________________________________________________________________________________________________________


#  The symmetric difference of two sets is the set of elements that are in either A or B , but not in their intersection(both)
#  ============================================================================================================================================
Set_1 = {1, 2, 3, 4, 7}
Set_2 = {1, 2, 3, 4, 5, 6}
print(sorted(Set_1))
print(sorted(Set_2))
print(sorted(Set_1.symmetric_difference(Set_2)))  # [5, 6, 7]
#  ____________________________________________________________________________________________________________________________________________

#  The difference_update() method removes the items that exist in both sets from the set which it is called on.
#  ============================================================================================================================================
contains_apple_set_1 = {"apple", "banana", "cherry"}
contains_apple_set_2 = {"google", "microsoft", "apple"}

contains_apple_set_1.difference_update(contains_apple_set_2)

print(contains_apple_set_1)
#  ____________________________________________________________________________________________________________________________________________

#  ____________________________________________________________________________________________________________________________________________

#  Difference between two sets in Python is equal to the difference between the number of elements in two sets.
#  The function difference() returns a set that is the difference between two sets.
#  ============================================================================================================================================
contains_apple_set_3 = {"apple", "banana", "cherry"}
contains_apple_set_4 = {"google", "microsoft", "apple"}

contains_apple_set_3.difference(contains_apple_set_4)

print(contains_apple_set_3)

A = {10, 20, 30, 40, 80}
B = {100, 30, 80, 40, 60}
print(A.difference(B))  # returns what is in a but no b {10, 20}
print(B.difference(A))  # returns what is in b but not a {100, 60}

#  ____________________________________________________________________________________________________________________________________________
#  Check if a set is a subset of another set.
#  ============================================================================================================================================
set_4 = {"apple", "banana", "cherry"}
set_5 = {"apple"}

if set_5.issubset(set_4):
    print("set 5 is a subset of set 4")
else:
    print('set 5 is NOT a subset of set 4')

if set_4.issubset(set_5):
    print("set 4 is a subset of set 5")
else:
    print('set 4 is NOT a subset of set 5')

#  ____________________________________________________________________________________________________________________________________________













